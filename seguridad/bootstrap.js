
/**
 * This file is generated by Sencha Cmd and should NOT be edited.  It is 
 * provided to support globbing requires, custom xtypes, and other 
 * metadata-driven class system features 
 */
Ext.Loader.addClassPathMappings({
  "Ext": "../packages/touch-2.4/src",
  "Ext.data.ProxyMgr": "../packages/touch-2.4/src/app/Application.js",
  "Ext.device.Purchases.Product": "../packages/touch-2.4/src/device/purchases/Sencha.js",
  "Ext.device.Purchases.Purchase": "../packages/touch-2.4/src/device/purchases/Sencha.js",
  "Ext.device.SQLite.Database": "../packages/touch-2.4/src/device/sqlite/Sencha.js",
  "Ext.device.SQLite.SQLResultSet": "../packages/touch-2.4/src/device/sqlite/Sencha.js",
  "Ext.device.SQLite.SQLResultSetRowList": "../packages/touch-2.4/src/device/sqlite/Sencha.js",
  "Ext.device.SQLite.SQLTransaction": "../packages/touch-2.4/src/device/sqlite/Sencha.js",
  "Ext.draw.engine.SvgContext.Gradient": "../packages/touch-2.4/src/draw/engine/SvgContext.js",
  "Ext.ux": "ux/",
  //"MyApp": "app",
  //"Users.store.Users": "app/store/Users.js"
});


String.isNullOrEmpty = function(value) {
    if(value === null) return true;
    return !(typeof value === "string" && value.trim().length > 0);
};

// Format date to UTC
Ext.JSON.encodeDate = function(o)
{
   return '"' + Ext.Date.format(o, 'c') + '"';
};

Ext.override(Ext.util.SizeMonitor, {
    constructor: function(config) {
        var namespace = Ext.util.sizemonitor;

        if (Ext.browser.is.Firefox) {
            return new namespace.OverflowChange(config);
        } else if (Ext.browser.is.WebKit) {
            if (!Ext.browser.is.Silk && Ext.browser.engineVersion.gtEq('535') && !Ext.browser.engineVersion.ltEq('537.36')) {
                return new namespace.OverflowChange(config);
            } else {
                return new namespace.Scroll(config);
            }
        } else if (Ext.browser.is.IE11) {
           return new namespace.Scroll(config);
        } else {
           return new namespace.Scroll(config);
        }
    }
});

Ext.override(Ext.util.PaintMonitor, {
   constructor: function(config) {
       if (Ext.browser.is.Firefox || (Ext.browser.is.WebKit && Ext.browser.engineVersion.gtEq('536') && !Ext.browser.engineVersion.ltEq('537.36') && !Ext.os.is.Blackberry)) {
           return new Ext.util.paintmonitor.OverflowChange(config);
       }
       else {
           return new Ext.util.paintmonitor.CssAnimation(config);
       }
   }
});
Ext.onReady(function() {

    if (Ext.Date) {
        Ext.Date.monthNames = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

        Ext.Date.getShortMonthName = function(month) {
            return Ext.Date.monthNames[month].substring(0, 3);
        };

        Ext.Date.monthNumbers = {
            Ene: 0,
            Feb: 1,
            Mar: 2,
            Abr: 3,
            May: 4,
            Jun: 5,
            Jul: 6,
            Ago: 7,
            Sep: 8,
            Oct: 9,
            Nov: 10,
            Dic: 11
        };

        Ext.Date.getMonthNumber = function(name) {
            return Ext.Date.monthNumbers[name.substring(0, 1).toUpperCase() + name.substring(1, 3).toLowerCase()];
        };

        Ext.Date.dayNames = ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"];

        Ext.Date.getShortDayName = function(day) {
            if (day == 3) return "Mié";
            if (day == 6) return "Sáb";
            return Ext.Date.dayNames[day].substring(0, 3);
        };

        Ext.Date.parseCodes.S.s = "(?:st|nd|rd|th)";
    }

    if (Ext.util && Ext.util.Format) {
        Ext.apply(Ext.util.Format, {
            thousandSeparator: '.',
            decimalSeparator: ',',
            currencySign: '\u20ac',
            // Spanish Euro
            dateFormat: 'd/m/Y'
        });
    }

    if(Ext.Picker){
        Ext.override(Ext.Picker, {
            doneText: 'Aceptar'    
        });
    }

    if(Ext.DatePicker){
        Ext.override(Ext.DatePicker, {
            'dayText': 'Día',
            'monthText': 'Mes',
            'yearText': 'Año',
            'slotOrder': ['day', 'month', 'year']    
        });
    }

    if(Ext.IndexBar){
        Ext.override(Ext.IndexBar, {
            'letters': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'Ñ', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']    
        });
    }

    if(Ext.NestedList){
        Ext.override(Ext.NestedList, {
            'backText': 'Atrás',
            'loadingText': 'Cargando...',
            'emptyText': 'No hay items disponibles'
        });
    }

    if(Ext.util.Format) {
        Ext.util.Format.defaultDateFormat = 'd/m/Y'; 
    }

    if(Ext.MessageBox){
        Ext.MessageBox.OK.text = 'Aceptar';
        Ext.MessageBox.CANCEL.text = 'Cancelar';
        Ext.MessageBox.YES.text = 'Si';
        Ext.MessageBox.NO.text = 'No';
    }
});


Ext.define('Ext.util.Cookies', {
    singleton: true,
    
    /**
     * Creates a cookie with the specified name and value. Additional settings for the cookie may be optionally specified
     * (for example: expiration, access restriction, SSL).
     * @param {String} name The name of the cookie to set.
     * @param {Object} value The value to set for the cookie.
     * @param {Object} [expires] Specify an expiration date the cookie is to persist until. Note that the specified Date
     * object will be converted to Greenwich Mean Time (GMT).
     * @param {String} [path] Setting a path on the cookie restricts access to pages that match that path. Defaults to all
     * pages ('/').
     * @param {String} [domain] Setting a domain restricts access to pages on a given domain (typically used to allow
     * cookie access across subdomains). For example, "sencha.com" will create a cookie that can be accessed from any
     * subdomain of sencha.com, including www.sencha.com, support.sencha.com, etc.
     * @param {Boolean} [secure] Specify true to indicate that the cookie should only be accessible via SSL on a page
     * using the HTTPS protocol. Defaults to false. Note that this will only work if the page calling this code uses the
     * HTTPS protocol, otherwise the cookie will be created with default options.
     */
    set : function(name, value){
        var argv = arguments,
            argc = arguments.length,
            expires = (argc > 2) ? argv[2] : null,
            path = (argc > 3) ? argv[3] : '/',
            domain = (argc > 4) ? argv[4] : null,
            secure = (argc > 5) ? argv[5] : false;
            
        document.cookie = name + "=" + escape(value) + ((expires === null) ? "" : ("; expires=" + expires.toGMTString())) + ((path === null) ? "" : ("; path=" + path)) + ((domain === null) ? "" : ("; domain=" + domain)) + ((secure === true) ? "; secure" : "");
    },

    /**
     * Retrieves cookies that are accessible by the current page. If a cookie does not exist, `get()` returns null. The
     * following example retrieves the cookie called "valid" and stores the String value in the variable validStatus.
     *
     *     var validStatus = Ext.util.Cookies.get("valid");
     *
     * @param {String} name The name of the cookie to get
     * @return {Object} Returns the cookie value for the specified name;
     * null if the cookie name does not exist.
     */
    get : function(name){
        var arg = name + "=",
            alen = arg.length,
            clen = document.cookie.length,
            i = 0,
            j = 0;
            
        while(i < clen){
            j = i + alen;
            if(document.cookie.substring(i, j) == arg){
                return this.getCookieVal(j);
            }
            i = document.cookie.indexOf(" ", i) + 1;
            if(i === 0){
                break;
            }
        }
        return null;
    },

    /**
     * Removes a cookie with the provided name from the browser
     * if found by setting its expiration date to sometime in the past.
     * @param {String} name The name of the cookie to remove
     * @param {String} [path] The path for the cookie.
     * This must be included if you included a path while setting the cookie.
     */
    clear : function(name, path){
        if(this.get(name)){
            path = path || '/';
            document.cookie = name + '=' + '; expires=Thu, 01-Jan-70 00:00:01 GMT; path=' + path;
        }
    },
    
    /**
     * @private
     */
    getCookieVal : function(offset){
        var endstr = document.cookie.indexOf(";", offset);
        if(endstr == -1){
            endstr = document.cookie.length;
        }
        return unescape(document.cookie.substring(offset, endstr));
    }
});


/*Ext.Loader.setConfig({
    enabled: true
});*/

//Ext.Loader.setPath('Ext.ux', 'ux/');

Ext.require("Ext.ux.field.TimePicker");
Ext.require("Ext.ux.field.AutocompleteField");
Ext.require("Ext.ux.field.DatePicker");

// Ext.ClassManager.addNameAlternateMappings({
//   "Users.controller.Main": [],
//   "Users.model.User": [],
//   "Users.store.Users": [],
//   "Users.view.CapturePicture": [],
//   "Users.view.Main": [],
//   "Users.view.UserForm": [],
//   "Users.view.UsersList": []
// });
// Ext.ClassManager.addNameAliasMappings({
//   "Users.controller.Main": [],
//   "Users.model.User": [],
//   "Users.store.Users": [
//     "store.users"
//   ],
//   "Users.view.CapturePicture": [
//     "widget.capturepicture"
//   ],
//   "Users.view.Main": [
//     "widget.main"
//   ],
//   "Users.view.UserForm": [
//     "widget.userform"
//   ],
//   "Users.view.UsersList": [
//     "widget.userslist"
//   ]
// });
